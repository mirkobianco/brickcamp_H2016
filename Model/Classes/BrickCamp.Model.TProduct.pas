unit BrickCamp.Model.TProduct;

interface

uses
  Spring,
  Spring.Persistence.Mapping.Attributes,
  BrickCamp.Model.IProduct;

type
  [Entity]
  [Table('PRODUCT')]
  TProduct = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey, cpNotNull, cpDontInsert], 0, 0, 0, 'primary key')]
    [AutoGenerated]
    FId: Integer;
  private
    FName: string;
    FDescription: string;
    FPrice: Nullable<Extended>;

    function GetId: Integer;
    function GetName: string;
    function GetDescription: string;
    function GetPrice: Nullable<Extended>;
    procedure SetName(const Value: string);
    procedure SetDescription(const Value: string);
    procedure SetPrice(const Value: Nullable<Extended>);
  public
    constructor Create(const Id: integer); reintroduce;

    property ID: Integer read GetId;

    [Column('NAME', [cpNotNull])]
    property Name: string read GetName write SetName;
    [Column('DESCRIPTION', [cpNotNull])]
    property Description: string read GetDescription write SetDescription;
    [Column('PRICE')]
    property Price: Nullable<Extended> read GetPrice write SetPrice;
  end;

implementation

{ TEmployee }

constructor TProduct.Create(const Id: integer);
begin
  FId := Id;
end;

function TProduct.GetDescription: string;
begin
  Result := FDescription;
end;

function TProduct.GetName: string;
begin
  Result := FName;
end;

function TProduct.GetId: Integer;
begin
  Result := FId;
end;

function TProduct.GetPrice: Nullable<Extended>;
begin
  Result := FPrice;
end;

procedure TProduct.SetDescription(const Value: string);
begin
  FDescription := Value;
end;

procedure TProduct.SetName(const Value: string);
begin
  FName := Value;
end;

procedure TProduct.SetPrice(const Value: Nullable<Extended>);
begin
  FPrice := Value;
end;

end.

