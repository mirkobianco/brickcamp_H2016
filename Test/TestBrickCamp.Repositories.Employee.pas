unit TestBrickCamp.Repositories.Employee;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, BrickCamp.Model.Employee, Spring.Container, Spring.Collections,
  BrickCamp.Repositories.Employee.Intf, BrickCamp.Repositories.Employee.Mock;

type
  // Test methods for class TMockEmployeeRepository

  TestTMockEmployeeRepository = class(TTestCase)
  strict private
    FMockEmployeeRepository: TMockEmployeeRepository;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetOne_ReturnsOne_Success;
    procedure TestGetList;
  end;

implementation

procedure TestTMockEmployeeRepository.SetUp;
begin
  FMockEmployeeRepository := TMockEmployeeRepository.Create;
end;

procedure TestTMockEmployeeRepository.TearDown;
begin
  FMockEmployeeRepository.Free;
  FMockEmployeeRepository := nil;
end;

procedure TestTMockEmployeeRepository.TestGetOne_ReturnsOne_Success;
var
  ReturnValue: IEmployee;
begin
  // TODO: Setup method call parameters
  ReturnValue := FMockEmployeeRepository.GetOne(100);

  Assert(Assigned(ReturnValue));
  // TODO: Validate method results
end;

procedure TestTMockEmployeeRepository.TestGetList;
var
  ReturnValue: IList<IEmployee>;
begin
  ReturnValue := FMockEmployeeRepository.GetList;
  // TODO: Validate method results
  Assert(ReturnValue.Count <> 0);
end;

initialization
  // Register any test cases with the test runner
  GlobalContainer.RegisterType<TEmployee>;
  GlobalContainer.Build;
  RegisterTest(TestTMockEmployeeRepository.Suite);
end.

