unit BrickCamp.Model.Employee;

interface

uses
  Spring,
  Spring.Persistence.Mapping.Attributes, BrickCamp.Repositories.Employee.Intf;

type
  [Entity]
  [Table('EMPLOYEE')]
  TEmployee = class(TInterfacedObject, IEmployee)
  private
    [Column('EMP_NO', [cpRequired, cpPrimaryKey, cpNotNull, cpDontInsert], 0, 0, 0, 'primary key')]
    [AutoGenerated]
    FId: Integer;
  private
    FFirstName: string;
    FLastName: string;
    FPhoneExt: Nullable<string>;
    FHireDate: TDateTime;
    FDepartmentNumber: string;
    FJobCode: string;
    FJobGrade: SmallInt;
    FJobCountry: string;
    FSalary: Extended;
    function GetDepartmentNumber: string;
    function GetFirstName: string;
    function GetHireDate: TDateTime;
    function GetId: Integer;
    function GetJobCode: string;
    function GetJobCountry: string;
    function GetJobGrade: SmallInt;
    function GetLastName: string;
    function GetPhoneExt: Nullable<string>;
    function GetSalary: Extended;
    procedure SetDepartmentNumber(const Value: string);
    procedure SetFirstName(const Value: string);
    procedure SetHireDate(const Value: TDateTime);
    procedure SetJobCode(const Value: string);
    procedure SetJobCountry(const Value: string);
    procedure SetJobGrade(const Value: SmallInt);
    procedure SetLastName(const Value: string);
    procedure SetPhoneExt(const Value: Nullable<string>);
    procedure SetSalary(const Value: Extended);
  public
    constructor Create(const Id: integer); reintroduce;
    property ID: Integer read GetId;

    [Column('FIRST_NAME', [cpNotNull])]
    property FirstName: string read GetFirstName write SetFirstName;
    [Column('LAST_NAME', [cpNotNull])]
    property LastName: string read GetLastName write SetLastName;
    [Column('PHONE_EXT')]
    property PhoneExt: Nullable<string> read GetPhoneExt write SetPhoneExt;
    [Column('HIRE_DATE', [cpNotNull])]
    property HireDate: TDateTime read GetHireDate write SetHireDate;
    [Column('DEPT_NO', [cpNotNull])]
    property DepartmentNumber: string read GetDepartmentNumber write SetDepartmentNumber;
    [Column('JOB_CODE', [cpNotNull])]
    property JobCode: string read GetJobCode write SetJobCode;
    [Column('JOB_GRADE', [cpNotNull])]
    property JobGrade: SmallInt read GetJobGrade write SetJobGrade;
    [Column('JOB_COUNTRY', [cpNotNull])]
    property JobCountry: string read GetJobCountry write SetJobCountry;
    [Column('SALARY', [cpNotNull])]
    property Salary: Extended read GetSalary write SetSalary;
  end;

implementation

{ TEmployee }

constructor TEmployee.Create(const Id: integer);
begin
  FId := Id;
end;

function TEmployee.GetDepartmentNumber: string;
begin
  Result := FDepartmentNumber;
end;

function TEmployee.GetFirstName: string;
begin
  Result := FFirstName;
end;

function TEmployee.GetHireDate: TDateTime;
begin
  Result := FHireDate;
end;

function TEmployee.GetId: Integer;
begin
  Result := FId;
end;

function TEmployee.GetJobCode: string;
begin
  Result := FJobCode;
end;

function TEmployee.GetJobCountry: string;
begin
  Result := FJobCountry;
end;

function TEmployee.GetJobGrade: SmallInt;
begin
  Result := FJobGrade;
end;

function TEmployee.GetLastName: string;
begin
  Result := FLastName;
end;

function TEmployee.GetPhoneExt: Nullable<string>;
begin
  Result := FPhoneExt;
end;

function TEmployee.GetSalary: Extended;
begin
  Result := FSalary;
end;

procedure TEmployee.SetDepartmentNumber(const Value: string);
begin
  FDepartmentNumber := Value;
end;

procedure TEmployee.SetFirstName(const Value: string);
begin
  FFirstName := Value;
end;

procedure TEmployee.SetHireDate(const Value: TDateTime);
begin
  FHireDate := Value;
end;

procedure TEmployee.SetJobCode(const Value: string);
begin
  FJobCode := Value;
end;

procedure TEmployee.SetJobCountry(const Value: string);
begin
  FJobCode := Value;
end;

procedure TEmployee.SetJobGrade(const Value: SmallInt);
begin
  FJobGrade := Value;
end;

procedure TEmployee.SetLastName(const Value: string);
begin
  FLastName := Value;
end;

procedure TEmployee.SetPhoneExt(const Value: Nullable<string>);
begin
  FPhoneExt := Value;
end;

procedure TEmployee.SetSalary(const Value: Extended);
begin
  FSalary := Value;
end;

end.

